package com.test;

import java.util.Arrays;

public class Test {
	public static void main(String[] args) {

		int[] arr = new int[] { 9, 12, 15, 17, 21 };
		int target = 21;
		System.out.println(binarySearch(arr, target));
		int[] arr1 = new int[] { 1, 2, 2, 2, 3, 4, 4, 4, 5 };
		int target1 = 4;
		System.out.println(firstOcceranceBS(arr1, target1));
		System.out.println(recursiveBinarySearch(0, arr1.length - 1, arr1, target1));
		
		int[] arr2= {1,2,2,3};
		int target2=0;
		System.out.println(lowerBound(arr2,target2));

	}

	public static int binarySearch(int[] arr, int target) {
		int low = 0;
		int high = arr.length - 1;
		int mid = low + (high - low) / 2;
		while (low <= high) {
			if (target == arr[mid]) {
				return mid;
			}
			if (target > arr[mid]) {
				low = mid + 1;
			} else {
				high = mid - 1;
			}
			mid = low + (high - low) / 2;
		}
		return -1;

	}

	public static int recursiveBinarySearch(int low, int high, int[] arr, int target) {
		 if(high<low)return -1;
		 int mid=low+(high-low)/2;
		 if(target==arr[mid])return mid;
		 if(target>arr[mid])return recursiveBinarySearch(mid+1,high,arr,target);
		 return recursiveBinarySearch(low,mid-1,arr,target);
	}

	public static int firstOcceranceBS(int[] arr, int target) {
		int low=0;
		int high=arr.length-1;
		int ans=-1;
		while(low<=high)
		{
			int mid=low+(high-low)/2;
			if(target==arr[mid])
			{
				ans=mid;
				high=mid-1;
				continue;
			}
			if(target>arr[mid])
			{
				low=mid+1;
			}
			else
			{
				high=mid-1;
			}
		}
		return ans;

	}

	public static int lowerBound(int [] arr,int target)
	{
		return ans;
	}
}
