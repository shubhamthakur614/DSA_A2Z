package com.searching.binarysearch;

import java.util.ArrayList;

public class Q8 {
	public static void main(String[] args) {
		ArrayList<Integer>al=new ArrayList<>();
		al.add(0);
		al.add(1);
		al.add(1);
		al.add(5);
		int target=1;
		
		firstAndLastPosition(al,al.size(),target);
	}

public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
    // Write your code here.
    return new int[] {firstPosition(0,n-1,arr,k),lastPosition(0,n-1,arr,k)};
}

public static int firstPosition(int low,int high,ArrayList<Integer> arr,int target)
{
    if(high<low)return -1;
    int ans=-1;
    int mid=low+(high-low)/2;
    if(arr.get(mid)==target)
    {
        ans=mid;
        high=mid-1;
        continue;
    }
    if(arr.get(mid)<target)return firstPosition(mid+1,high,arr,target);
    else if(arr.get(mid)>target)return firstPosition(low,mid-1,arr,target);
    return ans;
}

public static int lastPosition(int low, int high, ArrayList<Integer> arr, int target) {
	if (high < low)
		return -1;
	int ans = -1;
	int mid = low + (high - low) / 2;
	if (arr.get(mid) == target) {
		ans = mid;
		low = mid + 1;
		continue;
	}
	if (arr.get(mid) < target)
		return firstPosition(mid + 1, high, arr, target);
	else if (arr.get(mid) > target)
		return firstPosition(low, mid - 1, arr, target);
	return ans;
}
	
}
